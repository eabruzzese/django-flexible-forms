# -*- coding: utf-8 -*-
from typing import Any

import pytest
from django.contrib.admin.sites import AdminSite
from django.contrib.auth import get_user_model
from django.http import HttpRequest
from django.http.response import HttpResponseRedirect
from django.template.response import TemplateResponse
from test_app.models import CustomForm, CustomRecord

from flexible_forms.admin import FormsAdmin, RecordsAdmin

from .factories import FieldFactory, FormFactory


@pytest.mark.django_db
def test_form_admin(django_assert_num_queries: Any) -> None:
    """Ensure that the ModelAdmin for forms renders as expected."""

    forms_admin = FormsAdmin(model=CustomForm, admin_site=AdminSite())
    super_user = get_user_model().objects.create_superuser(
        username="admin", email="admin@example.com", password="admin"
    )
    request = HttpRequest()
    request.user = super_user

    # Generate a form.
    test_form = FormFactory(label="Test Form")
    test_field = FieldFactory(form=test_form)

    with django_assert_num_queries(1):
        queryset = forms_admin.get_queryset(request=request)
        form = queryset.first()

        # There should be one form (the one we created).
        assert form == test_form

        assert forms_admin._fields_count(form) == 1
        assert ">0<" in forms_admin._records_count(form)
        assert f"?form_id={form.pk}" in forms_admin._add_record(form)


@pytest.mark.django_db
def test_record_admin(django_assert_num_queries: Any) -> None:
    """Ensure that the ModelAdmin for records renders as expected."""

    records_admin = RecordsAdmin(model=CustomRecord, admin_site=AdminSite())
    super_user = get_user_model().objects.create_superuser(
        username="admin", email="admin@example.com", password="admin"
    )
    request = HttpRequest()
    request.user = super_user

    # Generate a form so we can create records.
    test_form = FormFactory(label="Test Form")
    test_field = FieldFactory(form=test_form, required=False)

    # The admin list view should only run a minimal number of queries to fetch
    # its listing.
    with django_assert_num_queries(1):
        records_admin.get_queryset(request=request).first()

    # Call the add_view() view method with no form ID to present the user with
    # a blank form with essentially only the form select input. No new records
    # should be created.
    add_request = HttpRequest()
    add_request.user = super_user
    add_request._dont_enforce_csrf_checks = True
    add_request.META["SCRIPT_NAME"] = None
    add_response = records_admin.add_view(add_request)
    assert not CustomRecord.objects.exists()
    assert isinstance(add_response, TemplateResponse)

    # Calling get_form() with no instance (i.e., adding a new record from the
    # admin page) should return a form with only the base fields since the
    # record doesn't know what form it should be using yet.
    record_form = records_admin.get_form(request=request, obj=None)
    assert set(record_form().fields.keys()) == set(
        f.name
        for f in CustomRecord._meta.get_fields()
        if f.concrete and f.name not in ("id",)
    )

    # Call the add_view() view method with our form's ID in the querystring to
    # create a new record. The response should redirect us to the change view.
    add_request = HttpRequest()
    add_request.user = super_user
    add_request.GET["form_id"] = test_form.pk
    add_response = records_admin.add_view(add_request)
    added_record = CustomRecord.objects.last()
    assert isinstance(add_response, HttpResponseRedirect)
    assert (
        f"{added_record.__class__.__name__.lower()}/{added_record.id}/change"
        in add_response.url
    )

    # The change form returned by the admin should have the same field
    # structure as the one generated by the record's form.as_django_form().
    record_form = records_admin.get_form(request=request, obj=added_record)
    admin_form_fields = record_form().fields
    record_form_fields = added_record.form.as_django_form(instance=added_record).fields
    assert set(admin_form_fields.keys()) == set(record_form_fields.keys())
